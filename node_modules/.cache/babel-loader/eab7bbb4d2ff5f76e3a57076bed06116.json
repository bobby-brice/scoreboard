{"ast":null,"code":"var _jsxFileName = \"/Users/bobbybrice/Documents/TreeHouse/unit07/scoreboard/src/components/Stopwatch.js\";\nimport React, { Component } from 'react';\n\nclass Stopwatch extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      isRunning: false,\n      elapsedTime: 0,\n      previousTime: 0\n    };\n\n    this.tick = () => {\n      if (this.state.isRunning) {\n        const now = Date.now();\n        this.setState({\n          previousTime: now,\n          elapsedTime: this.state.elapsedTime + (now - this.state.previousTime)\n        });\n      }\n    };\n\n    this.handleStopwatch = () => {\n      this.setState({\n        isRunning: !this.state.isRunning\n      });\n\n      if (!this.state.isRunning) {\n        this.setState({\n          previousTime: Date.now()\n        });\n      }\n    };\n  }\n\n  componentDidMount() {\n    this.intervalID = setInterval(() => this.tick(), 100);\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      className: \"stopwatch\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 37\n      },\n      __self: this\n    }, React.createElement(\"h2\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 38\n      },\n      __self: this\n    }, \"Stopwatch\"), React.createElement(\"span\", {\n      className: \"stopwatch-time\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 39\n      },\n      __self: this\n    }, \"0\"), React.createElement(\"button\", {\n      onClick: this.handleStopwatch,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 40\n      },\n      __self: this\n    }, this.state.isRunning ? \"stop\" : \"start\"), React.createElement(\"button\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 41\n      },\n      __self: this\n    }, \"Reset\"));\n  }\n\n}\n\nexport default Stopwatch;","map":{"version":3,"sources":["/Users/bobbybrice/Documents/TreeHouse/unit07/scoreboard/src/components/Stopwatch.js"],"names":["React","Component","Stopwatch","state","isRunning","elapsedTime","previousTime","tick","now","Date","setState","handleStopwatch","componentDidMount","intervalID","setInterval","render"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;;AAEA,MAAMC,SAAN,SAAwBD,SAAxB,CAAkC;AAAA;AAAA;AAAA,SAEhCE,KAFgC,GAExB;AACNC,MAAAA,SAAS,EAAE,KADL;AAENC,MAAAA,WAAW,EAAE,CAFP;AAGNC,MAAAA,YAAY,EAAE;AAHR,KAFwB;;AAAA,SAahCC,IAbgC,GAazB,MAAM;AACX,UAAI,KAAKJ,KAAL,CAAWC,SAAf,EAA0B;AACxB,cAAMI,GAAG,GAAGC,IAAI,CAACD,GAAL,EAAZ;AACA,aAAKE,QAAL,CAAc;AACZJ,UAAAA,YAAY,EAAEE,GADF;AAEZH,UAAAA,WAAW,EAAE,KAAKF,KAAL,CAAWE,WAAX,IAA0BG,GAAG,GAAG,KAAKL,KAAL,CAAWG,YAA3C;AAFD,SAAd;AAID;AACF,KArB+B;;AAAA,SAuBhCK,eAvBgC,GAuBd,MAAM;AACtB,WAAKD,QAAL,CAAc;AACZN,QAAAA,SAAS,EAAE,CAAC,KAAKD,KAAL,CAAWC;AADX,OAAd;;AAGA,UAAG,CAAC,KAAKD,KAAL,CAAWC,SAAf,EAA0B;AACxB,aAAKM,QAAL,CAAc;AAACJ,UAAAA,YAAY,EAAEG,IAAI,CAACD,GAAL;AAAf,SAAd;AACD;AACF,KA9B+B;AAAA;;AAQhCI,EAAAA,iBAAiB,GAAG;AAClB,SAAKC,UAAL,GAAkBC,WAAW,CAAC,MAAM,KAAKP,IAAL,EAAP,EAAoB,GAApB,CAA7B;AAED;;AAqBCQ,EAAAA,MAAM,GAAG;AACT,WACE;AAAK,MAAA,SAAS,EAAC,WAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBADF,EAEE;AAAM,MAAA,SAAS,EAAC,gBAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAFF,EAGE;AAAQ,MAAA,OAAO,EAAE,KAAKJ,eAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAyC,KAAKR,KAAL,CAAWC,SAAX,GAAuB,MAAvB,GAAgC,OAAzE,CAHF,EAIE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eAJF,CADF;AAQD;;AAzC+B;;AA4ClC,eAAeF,SAAf","sourcesContent":["import React, { Component } from 'react';\n\nclass Stopwatch extends Component {\n\n  state = {\n    isRunning: false,\n    elapsedTime: 0,\n    previousTime: 0\n  };\n\n  componentDidMount() {\n    this.intervalID = setInterval(() => this.tick(), 100)   \n    \n  }\n\n  tick = () => {\n    if (this.state.isRunning) {\n      const now = Date.now();\n      this.setState({\n        previousTime: now,\n        elapsedTime: this.state.elapsedTime + (now - this.state.previousTime)\n      });\n    }   \n  }\n\n  handleStopwatch = () => {\n    this.setState({\n      isRunning: !this.state.isRunning\n    });\n    if(!this.state.isRunning) {\n      this.setState({previousTime: Date.now() });\n    }\n  };\n\n    render() {\n    return (\n      <div className=\"stopwatch\">\n        <h2>Stopwatch</h2>\n        <span className=\"stopwatch-time\">0</span>\n        <button onClick={this.handleStopwatch}>{ this.state.isRunning ? \"stop\" : \"start\" }</button>\n        <button>Reset</button>\n      </div>\n    );\n  }\n}\n\nexport default Stopwatch;\n"]},"metadata":{},"sourceType":"module"}